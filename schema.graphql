# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type CategoriesPaginated {
  categories: [Category]
  cursor: Int
  total: Int
}

type Category {
  href: String
  icons: [Image]
  id: String
  name: String
}

type CurrentlyPlaying {
  Item: FullTrack
  context: PlaybackContext
  is_playing: Boolean
  progress_ms: Int
  timestamp: Int
}

type Followers {
  href: String
}

type FullTrack {
  SimpleTrack: SimpleTrack
  album: SimpleAlbum
  popularity: Int
}

type Image {
  height: Int
  url: String
  width: Int
}

type Mutation {
  followPlaylist(owner: String, playlistId: String, unfollow: Boolean): Boolean
  play(devID: String, uri: String): Boolean
  stop: Boolean
  test: String
}

type MySongsPaginated {
  cursor: Int
  songs: [SavedTrack]
  total: Int
}

type PlaybackContext {
  href: String
  type: String
  uri: String
}

type PlayerDevice {
  id: String
  is_active: Boolean
  is_restricted: Boolean
  name: String
  type: String
  volume_percent: Int
}

type PlayerState {
  CurrentlyPlaying: CurrentlyPlaying
  device: PlayerDevice
  repeat_state: String
  shuffle_state: Boolean
}

type PlaylistInfo {
  description: String
  id: String
  images: [Image]
  name: String
}

type PlaylistSongsPaginated {
  cursor: Int
  songs: [SavedTrack]
  total: Int
}

type PlaylistTracks {
  href: String
}

type PlaylistsPaginated {
  cursor: Int
  playlists: [SimplePlaylist]
  total: Int
}

type Profile {
  email: String
  images: [Image]
  name: String
}

type Query {
  auth(code: String): Token
  categoriesPaginated(cursor: Int, pace: Int): CategoriesPaginated
  followPlaylist(playlistId: String): Boolean
  isLogged: Boolean
  login(state: String): String
  myDevices: [PlayerDevice]
  mySongsPaginated(cursor: Int, pace: Int): MySongsPaginated
  nowPlaying: PlayerState
  playlistInfo(owner: String, playID: String): PlaylistInfo
  playlistSongsPaginated(cursor: Int, owner: String, pace: Int, playID: String): PlaylistSongsPaginated
  playlistsPaginated(catID: String, cursor: Int, pace: Int): PlaylistsPaginated
  profile: Profile
  publicSongsPaginated(cursor: Int, pace: Int, query: String): MySongsPaginated
}

type SavedTrack {
  added_at: String
  track: FullTrack
}

type SimpleAlbum {
  album_type: String
  available_markets: [String]
  href: String
  id: String
  images: [Image]
  name: String
  uri: String
}

type SimpleArtist {
  href: String
  id: String
  name: String
  uri: String
}

type SimplePlaylist {
  collaborative: Boolean
  href: String
  id: String
  images: [Image]
  name: String
  owner: User
  public: Boolean
  snapshot_id: String
  tracks: PlaylistTracks
  uri: String
}

type SimpleTrack {
  artists: [SimpleArtist]
  available_markets: [String]
  disc_number: Int
  duration_ms: Int
  explicit: Boolean
  href: String
  id: String
  name: String
  preview_url: String
  track_number: Int
  uri: String
}

type Token {
  access_token: String
  expiry: Int
  refresh_token: String
  token_type: String
}

type User {
  display_name: String
  followers: Followers
  href: String
  id: String
  uri: String
}
